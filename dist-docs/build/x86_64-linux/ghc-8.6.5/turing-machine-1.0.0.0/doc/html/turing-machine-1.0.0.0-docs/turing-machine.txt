-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/CrazyMind102/turing-machine#readme</a>
@package turing-machine
@version 1.0.0.0

module Lib

-- | Function to count the ones on the tape. It is primaly good to be used
--   for Busy Beavers and similar programs.
count1s :: TuringMachine -> Integer

-- | Implementation of the movement of the head of the Turing machine.
data Move

-- | L is used to move the head of the Turing machine to the left.
L :: Move

-- | R is used to move the head of the Turing machine to the right.
R :: Move

-- | Running the Turing machine without any output until the Turing machine
--   halts. It returns the finished Turing machine.
run :: TuringMachine -> TuringMachine

-- | Version of <a>run</a> that prints the results after each step.
runP :: TuringMachine -> IO TuringMachine

-- | The State of the Turing machine is saved as a String.
type State = Text

-- | Each step of the Turing machine is implemented in this function. It
--   returns the resulting Turing machine.
step :: TuringMachine -> TuringMachine

-- | Version of step that prints the result. It is intented for only a
--   single step. For a complete run that should be printed use runP.
stepP :: TuringMachine -> IO TuringMachine

-- | Implementation of the table of instructions. The States of the Turing
--   machine are the keys of a Map. The values of this Map are the
--   instructions. The instructions are another Map. The keys of that Map
--   are the read Symbol. The values of that Map are a tuple which tells
--   the Turing machine what to do. The first element of the tuple is the
--   Symbol to write. The second element is the movement the head has to
--   perform. The third element is the State in which the Turing machine
--   switches afterwads.
data Table
Table :: Map State (Map Char (Char, Move, State)) -> Table

-- | Implementation of the tape of the Turing machine. The Symbols are
--   stored in two Strings and a Char. The String on the left is the tape
--   left of the head and the String on the right is the tape right of the
--   head. The Char is the Symbol the head is over at a given moment. In
--   this implementation of a Turing machine the head is part of the tape
--   itself.
data Tape
Tape :: Text -> Char -> Text -> Tape
toMove :: Text -> Maybe Move

-- | The implementation of the Turing machine. The Turing machine has three
--   values: the State it is in, the table of instructions and the tape.
data TuringMachine
TM :: State -> Table -> Tape -> Integer -> TuringMachine
instance GHC.Read.Read Lib.TuringMachine
instance GHC.Read.Read Lib.Tape
instance GHC.Read.Read Lib.Table
instance GHC.Read.Read Lib.Move
instance GHC.Generics.Generic Lib.Move
instance GHC.Classes.Eq Lib.Move
instance GHC.Show.Show Lib.TuringMachine
instance GHC.Show.Show Lib.Tape
instance GHC.Show.Show Lib.Table
instance GHC.Show.Show Lib.Move
